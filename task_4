Для того чтобы понять, что будет напечатано при вызове функции, необходимо проанализировать, как работает функция tsum():

При вызове tsum(list(range(3))) в функцию tsum() будет передан список [0,1,2]. Так как на данном шаге логическое выражение оператора 
if неверно (длина списка [0,1,2] не равна единице), далее будет выполняться блок, следующий за оператором else. 

В блоке else рекурсивно будет вызвана функция tsum() со списком [0,1] в качестве аргумента, значение in_list[-1] равно 2. В данном вызове 
логическое выражение оператора if также не будет верным, так как длина списка не равна 1, и поэтому будет выполняться блок, следующий за 
оператором else. В блоке else снова будет вызвана функция tsum() со списком [0] в качестве аргумента. Значение in_list[-1] равно 1. Здесь 
логическое выражение оператора if будет верным (длина списка [0] равна 1) и функция вернет значение 0. 

Значение 0 – результат последнего вызова функции tsum(). Предпоследний вызов функции tsum() вернет значение 0 + 1 
(где 1 – значение in_list[-1]).  А первый вызов функции tsum() вернет значение, полученное на предыдущем шаге (то есть 1), просуммированное
со значением in_list[-1] – в данном случае оно равно 2. В итоге конечный результат – это цифра 3. 

Исходя из того, как работает функция, можно сделать вывод, что функция будет возвращать значение, равное сумме от 1 до a-1, где a - это 
аргумент функции range(), или сумму первых n членов арифметической прогрессии, где n=a-1.
Используя формулы, можно определить, какое значение должно получиться при вызове функции с аргументом range, равным 3000:
(1+2999)2999/2 = 4498500
Для получения данного результата функция tsum() должна быть вызвана 3000 раз, однако рекурсивный вызов функции расходует память компьютера,
и, с большой вероятностью, максимально возможная глубина рекурсии будет достигнута перед тем, как функция tsum() выполнится 3000 раз и в
результате будет возбуждено исключение.

